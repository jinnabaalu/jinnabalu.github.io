developer-intro: |
  Git basics is a good idea before you start using it, as a programer upto what extent you need is the question? Let's get into it
developer:
  - title: Configure git
    description: |
      <code>git config</code> helps you set your email and name for your commit, we can't change the committer names after the commit.
      Every contributor will have their identification on every commit. <br><br> We can configure git at two levels, at the repository level, and global
    command: |
      # Global Config      <br>
      git config --global user.name "Your Name" <br>
      git config --global user.email yourmail@domain.tld <br><br>

      # Repository Config - useful when you work with multiple business emails<br>
      git config --global user.name "Your Name"<br>
      git config --global user.email yourmail@domain.com <br>
  - title: Initialize
    description: Initialize new local repository
    command: git init
  - title: Clone the repository
    description:
    command: |
      git clone [URL_FROM_GIT_SERVER] <br>
      # Examples: <br>
      git clone git@github.com:JinnaBalu/jinnabalu.github.io.git <br> 
      git clone https://github.com/JinnaBalu/jinnabalu.github.io.git <br>
  - title: Get Latest
    description:
    command: |
      git pull<br>
      # OR <br>
      git pull origin [BRANCH_NAME]
  - title: git status
    description: Check the status of the files added, modified or deleted
    command: git status
  - title: git diff
    description: Check the lines of code added, modified ot deleted
    command: git diff
  - title: Commit
    description:
    command: |
      # Commit local changes <br>
      git add --all <br>
      git commit -am "message" <br>
      # Show commits history <br>
      git log <br>
      # Show history of the file <br>
      git log -p [file] <br>
      # Who changed what and when <br>
      git blame [file] <br>
  - title: git remote
    description: Check the origin repository url. Update or set remote url of the local repository
    command: |
      # Listing remote <br>
      git remove -v <br><br>
      # Switch remote URL between https - ssh <br>
      git remote set-url origin [https://[url]] <br>
      git remote set-url origin [git@git://[url]]
  - title: Branch Management
    description:
    command: |
      # List All branches <br>
      git branch -av <br>
      # Switch between Branches  <br>
      git checkout [BRANCH_NAME]  <br>
      # Create a new branch  <br>
      git checkout -b [BRANCH_NAME]  <br>
      # Delete Branch  <br>
      git branch -d [BRANCH_NAME]  <br>
      # Forceful Delete  <br>
      git branch -D [BRANCH_NAME]  <br>
      # Delete remote branch  <br>
      git branch -dr [BRANCH_NAME]  <br>
  - title: Merge changes between branches
    description:
    command: | 
      # 1. Merging changes from feature_branch to develop <br><br>
      # 1.1 Get latest from develop and merge to feature_branch <br>
      git checkout develop <br>
      git pull <br>
      git checkout feature_branch <br>
      git merge --no-ff origin develop <br><br>
      # Note : To be safe from conflict with develop(GOOD PRACTICE), we will resolve in feature_branch <br><br>
      # Merge feature_branch to develop <br>
      git checkout develop <br>
      git merge --no-ff origin feature_branch <br>
  - title: git reset | undo
    description: Discard changes or reset back, or rebase changes
    command: |
      # Discard all local changes <br>
      git reset --hard HEAD <br><br>
      # Discard all local changes of file <br>
      git checkout HEAD [FILE_PATH] <br><br>
      # Soft Reset <br>
      git reset [commit_hash] --soft <br><br>
      # Mixed Reset <br>
      git reset [commit_hash] --mixed <br>
      git reset [commit_hash] <br><br>
      # Hard Reset <br>
      git reset [commit_hash] --hard
devops:
  intro:
    - title: Recursively remove all untracked files in the tree.
      command: git clean -f
    - title: throw out all of your changes to existing files, but not new ones
      command: git reset --hard
    - title: remove file from staging area
      command: git rm --cached [file]
    - title: see diff of files in staging area
      command: git diff --staged
    - title: see tracked files
      command: git ls-files
    - title: see a branch graph
      command: git log --graph
    - title: see all tags
      command: git tag
    - title: see list of deleted files
      command: git ls-files -d
    - title: restore all deleted files
      command: git ls-files -d | xargs git checkout --
    - title: view commits not yet pushed to remote
      command: git log --branches --not --remotes
    - title: difference between two branches
      command: git diff --stat --color master..branch
    - title: see a list of all objects - `git rev-list --objects --all`
    - title: remove file from index
      command: git rm --cached filename.txt
    - title: get a list of all commit messages for a repo
      command: git log --pretty=format:'%s'
